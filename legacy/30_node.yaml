#@ load("funcs.lib.yml", "map_host_linstor", "map_host_lvm", "name", "node", "initimage", "controllerhostport", "registry", "controllerimage", "satelliteimage")
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ node()
  namespace: kube-system
data:
  INIT_DEBUG: 'false'
  #! Must be an FQDN here, otherwise it might not resolve!
  LS_CONTROLLERS: #@ name() + "-controller.kube-system.svc.cluster.local:3370"
  DRBD_IMG_TAG: v9.0.21 #! "none" will skip drbd installation
  DRBD_IMG_PULL_POLICY: Always
  MAP_HOST_LVM: 'true'
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: #@ node()
  namespace: kube-system
spec:
  minReadySeconds: 0
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: #@ name()
      app.kubernetes.io/component: #@ node()
  template:
    metadata:
      labels:
        app.kubernetes.io/name: #@ name()
        app.kubernetes.io/component: #@ node()
    spec:
      priorityClassName: system-node-critical
      restartPolicy: Always
      hostNetwork: true
      hostPID: true
      hostIPC: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
      - name: init
        image: #@ initimage()
        imagePullPolicy: Always
        securityContext:
          privileged: true
        resources:
          #! requests:
          #!   cpu: 50m
          #!   memory: 50Mi
          limits:
            cpu: 100m
            memory: 100Mi
        envFrom:
        - configMapRef:
            name:  #@ node()
        env:    
        - name: THIS_POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid        
        - name: THIS_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: THIS_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        args:
            - initNode
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: init
          mountPath: /init
        - name: dockersock
          mountPath: /var/run/docker.sock
        - name: usr-src
          mountPath: /usr/src
        - name: lib-modules
          mountPath: /lib/modules
        - name: #@ "opt-" + name()
          mountPath: #@ "/opt/" + name()
        - name: usr-local-bin
          mountPath: /usr/local/bin
      containers:
      - name: satellite
        image: #@ satelliteimage()
        imagePullPolicy: Always
        securityContext:
          privileged: true
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 1
            memory: 1Gi
        envFrom:
        - configMapRef:
            name:  #@ node()
        env:
        - name: THIS_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: THIS_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        #@ if name() == "piraeus":
        args:
        - startSatellite
        - --stack-traces
        #@ end
        readinessProbe:
          successThreshold: 3
          failureThreshold: 3
          tcpSocket:
            port: 3366
          initialDelaySeconds: 5
          periodSeconds: 1
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: init
          mountPath: /init
        - name: init
          mountPath: /usr/bin/pre-start.sh
          subPath: bin/node-pre-start.sh
        - name: log
          mountPath: /var/log/linstor-satellite
        - name: storagepool-dir
          mountPath: #@ "/var/local/" + name() + "/storagepools"
        - name: dev
          mountPath: /dev
        - name: lib-modules
          mountPath: /lib/modules
        #@ if map_host_lvm():
        - name: run-lvm
          mountPath: /run/lvm
        - name: run-udev
          mountPath: /run/udev
        #@ end
        #@ if map_host_linstor():
        - name: var-lib-linstor-d
          mountPath: /var/lib/linstor.d
        #@ end
      - name: proxy
        image: docker.io/library/haproxy:2.1.3-alpine
        imagePullPolicy: Always
        resources:
          #! requests:
          #!   cpu: '100m'
          #!   memory: '100Mi'
          limits:
            cpu: 200m
            memory: 200Mi
        envFrom:
        - configMapRef:
            name:  #@ node()
        env:
        - name: FRONTEND_IP
          value: 127.0.0.1
        readinessProbe:
          successThreshold: 3
          failureThreshold: 3
          httpGet:
            host: 127.0.0.1
            port: 3370
          periodSeconds: 1
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: init
          mountPath: /usr/local/etc/haproxy
          subPath: etc/haproxy
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: init
        emptyDir: {}
      - name: #@ "opt-" + name()
        hostPath:
          path: #@ "/opt/" + name()
      - name: storagepool-dir
        hostPath:
          path: #@ "/var/local/" + name() + "/storagepools"
      - name: log
        hostPath:
          path: #@ "/var/log/"+ name() + "/linstor-satellite"
      - name: dev
        hostPath:
          path: /dev
      - name: usr-local-bin
        hostPath:
          path: /usr/local/bin
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: usr-src
        hostPath:
          path: /usr/src
      - name: lib-modules
        hostPath:
          path: /lib/modules
      #@ if map_host_lvm():
      - name: run-lvm
        hostPath:           
          path: /run/lvm
      - name: run-udev
        hostPath:           
          path: /run/udev 
      #@ end
      #@ if map_host_linstor():
      - name: etc-drbd-d
        hostPath:
          path: /etc/drbd.d
      - name: var-lib-linstor-d
        hostPath:
          path: /var/lib/linstor.d
      - name: etc-linstor
        hostPath:
          path: /etc/linstor
      #@ end
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: #@ name() + "/node"
                operator: In
                values:
                  - "true"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      tolerations:
      - operator: Exists
        effect: NoSchedule
      #! imagePullSecrets:
      #! - name: piraeus-regcred

#@ load("funcs.lib.yml", "name", "csicontroller", "csiimage", "controllerhostport", "controller")
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: #@ csicontroller()
  namespace: kube-system
  labels:
    app.kubernetes.io/name: #@ name()
    app.kubernetes.io/component: #@ csicontroller()
spec:
  serviceName: #@ csicontroller()
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: #@ name()
      app.kubernetes.io/component: #@ csicontroller()
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: #@ name()
        app.kubernetes.io/component: #@ csicontroller()
    spec:
      serviceAccount: #@ csicontroller() + "-sa"
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      terminationGracePeriodSeconds: 0
      #! hostNetwork: true
      #! dnsPolicy: ClusterFirstWithHostNet
      dnsPolicy: ClusterFirst
      #! imagePullSecrets:
      #! - name: #@ name() + "-regcred"
      containers:
      - name: csi-provisioner
        image: quay.io/k8scsi/csi-provisioner:v1.5.0
        imagePullPolicy: "Always"
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 500m
            memory: 500Mi
        args:
        - "--csi-address=$(ADDRESS)"
        - "--v=5"
        - "--feature-gates=Topology=true"
        - "--timeout=120s"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: csi-attacher
        image: quay.io/k8scsi/csi-attacher:v2.1.1
        imagePullPolicy: "Always"
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 500m
            memory: 500Mi
        args:
        - "--v=5"
        - "--csi-address=$(ADDRESS)"
        - "--timeout=120s"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: csi-snapshotter
        image: quay.io/k8scsi/csi-snapshotter:v2.0.1
        imagePullPolicy: "Always"
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 500m
            memory: 500Mi
        args:
        - "--csi-address=$(ADDRESS)"
        - "--timeout=120s"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: csi-cluster-driver-registrar
        image: quay.io/k8scsi/csi-cluster-driver-registrar:v1.0.1
        imagePullPolicy: "Always"
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 500m
            memory: 500Mi
        args:
        - "--v=5"
        - "--pod-info-mount-version=\"v1\""
        - "--csi-address=$(ADDRESS)"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: #@ name() + "-csi-plugin"
        image: #@ csiimage()
        imagePullPolicy: "Always"
        resources:
          #! requests:
          #!   cpu: '500m'
          #!   memory: '500Mi'
          limits:
            cpu: 500m
            memory: 500Mi
        args:
          - "--csi-endpoint=$(CSI_ENDPOINT)"
          - "--node=$(KUBE_NODE_NAME)"
          - "--linstor-endpoint=$(LS_CONTROLLERS)"
          - "--log-level=debug"
        env:
          - name: CSI_ENDPOINT
            value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: LS_CONTROLLERS
            value: #@ "http://" + controllerhostport()
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
      - name: localtime
        hostPath:
          path: /etc/localtime
      - name: socket-dir
        emptyDir: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              #! - key: piraeus/controller
              #!   operator: In
              #!   values:
              #!   - "true"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      tolerations:
        - operator: Exists
          effect: NoSchedule
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: #@ csicontroller() + "-sa"
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-provisioner-role"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-provisioner-binding"
subjects:
  - kind: ServiceAccount
    name: #@ csicontroller() + "-sa"
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: #@ csicontroller() + "-provisioner-role"
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-attacher-role"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-attacher-binding"
subjects:
  - kind: ServiceAccount
    name: #@ csicontroller() + "-sa"
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: #@ csicontroller() + "-attacher-role"
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-cluster-driver-registrar-role"
rules:
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers"]
  verbs: ["create", "delete", "list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-cluster-driver-registrar-binding"
subjects:
  - kind: ServiceAccount
    name: #@ csicontroller() + "-sa"
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: #@ csicontroller() + "-cluster-driver-registrar-role"
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-snapshotter-role"
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["create", "get", "list", "watch", "update", "delete"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "list", "watch", "delete"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots/status"]
  verbs: ["update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: #@ csicontroller() + "-snapshotter-binding"
subjects:
- kind: ServiceAccount
  name: #@ controller() + "-sa"
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: #@ csicontroller() + "-snapshotter-role"
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: linstor.csi.linbit.com
spec:
  attachRequired: true
  podInfoOnMount: true